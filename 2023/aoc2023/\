defmodule Day01 do
  def p1() do
    File.stream!("data/day01.txt")
    |> Enum.map(&String.trim/1)
    |> solve
  end

  def solve(lines) do
    lines
    |> Enum.map(&String.split(&1, "", trim: true))
    |> Enum.map(&get_nums/1)
    |> Enum.reduce(0, fn {a, b}, acc -> 10 * a + b + acc end)
  end

  def p2() do
    File.stream!("data/day01.txt")
    |> Enum.map(&String.trim/1)
    |> Enum.map(&get_nums2/1)
    |> solve
  end

  def p2test() do
    File.stream!("data/day01_test.txt")
    |> Enum.map(&String.trim/1)
    |> Enum.map(&get_nums2/1)
    |> solve
  end

  def get_nums2(s) do
    strs = ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine"]

    reps = Map.new(Enum.with_index(strs, 1))

    res =
      strs
      |> Enum.filter(fn x -> String.contains?(s, x) end)
      |> Enum.sort_by(fn x -> String.split(s, x) |> hd |> String.length() end)
      |> Enum.reduce(s, fn x, acc -> String.replace(acc, x, "#{reps[x]}") end)

    if Enum.any?(strs, fn x -> String.contains?(s, x) end) do
      IO.inspect({s, res, get_nums2(res)})
    end

    res
  end

  def is_num(s) do
    Integer.parse(s) != :error
  end

  def get_nums(s) do
    rev = Enum.reverse(s)
    {n1, _} = Enum.find(s, &is_num/1) |> Integer.parse()
    {n2, _} = Enum.find(rev, &is_num/1) |> Integer.parse()
    {n1, n2}
  end
end
